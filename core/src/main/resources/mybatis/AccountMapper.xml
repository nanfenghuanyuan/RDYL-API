<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zh.module.dao.AccountMapper">
  <resultMap id="BaseResultMap" type="com.zh.module.entity.Account">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="availbalance" jdbcType="DECIMAL" property="availbalance" />
    <result column="frozenblance" jdbcType="DECIMAL" property="frozenblance" />
    <result column="account_type" jdbcType="INTEGER" property="accountType" />
    <result column="coin_type" jdbcType="INTEGER" property="coinType" />
    <result column="createtime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="updatetime" jdbcType="TIMESTAMP" property="updatetime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, availbalance, frozenblance, account_type, coin_type, createtime, updatetime
  </sql>
  <insert id="insert" parameterType="com.zh.module.entity.Account">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into account (user_id, availbalance, frozenblance, 
      account_type, coin_type, createtime, 
      updatetime)
    values (#{userId,jdbcType=INTEGER}, #{availbalance,jdbcType=DECIMAL}, #{frozenblance,jdbcType=DECIMAL}, 
      #{accountType,jdbcType=INTEGER}, #{coinType,jdbcType=INTEGER}, #{createtime,jdbcType=TIMESTAMP}, 
      #{updatetime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.zh.module.entity.Account">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="availbalance != null">
        availbalance,
      </if>
      <if test="frozenblance != null">
        frozenblance,
      </if>
      <if test="accountType != null">
        account_type,
      </if>
      <if test="coinType != null">
        coin_type,
      </if>
      <if test="createtime != null">
        createtime,
      </if>
      <if test="updatetime != null">
        updatetime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="availbalance != null">
        #{availbalance,jdbcType=DECIMAL},
      </if>
      <if test="frozenblance != null">
        #{frozenblance,jdbcType=DECIMAL},
      </if>
      <if test="accountType != null">
        #{accountType,jdbcType=INTEGER},
      </if>
      <if test="coinType != null">
        #{coinType,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.zh.module.entity.Account">
    update account
    set user_id = #{userId,jdbcType=INTEGER},
      availbalance = #{availbalance,jdbcType=DECIMAL},
      frozenblance = #{frozenblance,jdbcType=DECIMAL},
      account_type = #{accountType,jdbcType=INTEGER},
      coin_type = #{coinType,jdbcType=INTEGER},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      updatetime = #{updatetime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zh.module.entity.Account">
    update account
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="availbalance != null">
        availbalance = #{availbalance,jdbcType=DECIMAL},
      </if>
      <if test="frozenblance != null">
        frozenblance = #{frozenblance,jdbcType=DECIMAL},
      </if>
      <if test="accountType != null">
        account_type = #{accountType,jdbcType=INTEGER},
      </if>
      <if test="coinType != null">
        coin_type = #{coinType,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from account
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" parameterType="java.util.Map" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account
    where 1=1 
    <if test="userId != null">
       and  user_id = #{userId,jdbcType=INTEGER}
    </if>
    <if test="availbalance != null">
       and  availbalance = #{availbalance,jdbcType=DECIMAL}
    </if>
    <if test="frozenblance != null">
       and  frozenblance = #{frozenblance,jdbcType=DECIMAL}
    </if>
    <if test="accountType != null">
       and  account_type = #{accountType,jdbcType=INTEGER}
    </if>
    <if test="coinType != null">
       and  coin_type = #{coinType,jdbcType=INTEGER}
    </if>
    <if test="createtime != null">
       and  createtime = #{createtime,jdbcType=TIMESTAMP}
    </if>
    <if test="updatetime != null">
       and  updatetime = #{updatetime,jdbcType=TIMESTAMP}
    </if>
     order by id desc 
  </select>
  <select id="selectPaging" parameterType="java.util.Map" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account
    where 1=1 
    <if test="userId != null">
       and  user_id = #{userId,jdbcType=INTEGER}
    </if>
    <if test="availbalance != null">
       and  availbalance = #{availbalance,jdbcType=DECIMAL}
    </if>
    <if test="frozenblance != null">
       and  frozenblance = #{frozenblance,jdbcType=DECIMAL}
    </if>
    <if test="accountType != null">
       and  account_type = #{accountType,jdbcType=INTEGER}
    </if>
    <if test="coinType != null">
       and  coin_type = #{coinType,jdbcType=INTEGER}
    </if>
    <if test="createtime != null">
       and  createtime = #{createtime,jdbcType=TIMESTAMP}
    </if>
    <if test="updatetime != null">
       and  updatetime = #{updatetime,jdbcType=TIMESTAMP}
    </if>
     order by id desc limit #{firstResult,jdbcType=INTEGER},#{maxResult,jdbcType=INTEGER}
  </select>
  <select id="selectCount" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(*) 
    from account 
    where 1=1 
    <if test="userId != null">
       and  user_id = #{userId,jdbcType=INTEGER}
    </if>
    <if test="availbalance != null">
       and  availbalance = #{availbalance,jdbcType=DECIMAL}
    </if>
    <if test="frozenblance != null">
       and  frozenblance = #{frozenblance,jdbcType=DECIMAL}
    </if>
    <if test="accountType != null">
       and  account_type = #{accountType,jdbcType=INTEGER}
    </if>
    <if test="coinType != null">
       and  coin_type = #{coinType,jdbcType=INTEGER}
    </if>
    <if test="createtime != null">
       and  createtime = #{createtime,jdbcType=TIMESTAMP}
    </if>
    <if test="updatetime != null">
       and  updatetime = #{updatetime,jdbcType=TIMESTAMP}
    </if>
  </select>
  <update id="updateBalance" parameterType="com.zh.module.entity.Account">
    update account
    set availbalance=availbalance + #{availbalance},frozenblance = frozenblance+ #{frozenblance}
    where user_id=#{userId} and account_type=#{accountType} and coin_type=#{coinType}
    <if test="availbalance &lt; 0">
      and availbalance &gt;= -#{availbalance}
    </if>
    <if test="frozenblance &lt; 0">
      and frozenblance &gt;= -#{frozenblance}
    </if>
  </update>
</mapper>